vue便签

1) this.$router.push('/login');  导航到不同的URL

2) router.resolve 自定义一个页面跳转的方法

3) let: 用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。

4) const: const声明一个只读的常量。一旦声明，常量的值就不能改变。




1.export default 的用法：相当于提供一个接口给外界，让其他文件通过 import 来引入使用。



if (!this.name.replace(/^\s+$/, '')) {
this.$message.error('姓名不能为空');
return;
} 

if (this.name.length<2) {
this.$message.error('姓名过短，请修改');
return;
}

if (!this.idCode.replace(/^\s+$/, '')) {
this.$message.error('身份证不能为空');
return;
}

if(/[\u4E00-\u9FA5]/.test(this.idCode)){
this.$message.error("身份证请勿输入中文");
return；
}

if(!/(^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{2}$)/.test(this.idCode)){
this.$message.error('身份证格式有误');
return;
}

if (!this.phone.replace(/^\s+$/, '')) {
this.$message.error('手机号不能为空');
return;
} else if (!/^1((((3[0-3,5-9])|(4[5,7,9])|(5[0-3,5-9])|(66)|(7[1-3,5-8])|(8[0-9])|(9[1,8,9]))[0-9]{8})|((34)[0-8]\d{7}))$/.test(this.phone)) {
this.$message.error('手机号格式有误');
return;
}

if (pwdCharArray.length > 11 && pwdCharArray.some(ele => /^[a-z]/.test(ele)) && pwdCharArray.some(ele => /^[A-Z]/.test(ele)) && pwdCharArray.some(ele => /^[0-9]/.test(ele))) {
}else{
self.errorVisable = true;
self.errorMessage = "密码格式错误";
return;
}


1) router-link

1.不带参数
<router-link :to="{name:'home'}"> 
<router-link :to="{path:'/home'}"> //name,path都行, 建议用name 
// 注意：router-link中链接如果是'/'开始就是从根路由开始，如果开始不带'/'，则从当前路由开始

2.带参数
<router-link :to="{name:'home', params: {id:1}}"> 
// params传参数 (类似post)
// 路由配置 path: "/home/:id" 或者 path: "/home:id" 
// 不配置path ,第一次可请求,刷新页面id会消失
// 配置path,刷新页面id会保留
// html 取参 $route.params.id
// script 取参 this.$route.params.id


<router-link :to="{name:'home', query: {id:1}}"> 
// query传参数 (类似get,url后面会显示参数)
// 路由可不配置
// html 取参 $route.query.id
// script 取参 this.$route.query.id


2) this.$router.push() (函数里面调用)

1.不带参数
this.$router.push('/home')
this.$router.push({name:'home'})
this.$router.push({path:'/home'})


2.query传参 
this.$router.push({name:'home',query: {id:'1'}})
this.$router.push({path:'/home',query: {id:'1'}})
// html 取参 $route.query.id
// script 取参 this.$route.query.id


3.params传参
this.$router.push({name:'home',params: {id:'1'}}) // 只能用 name
// 路由配置 path: "/home/:id" 或者 path: "/home:id" ,
// 不配置path ,第一次可请求,刷新页面id会消失
// 配置path,刷新页面id会保留
// html 取参 $route.params.id
// script 取参 this.$route.params.id


4.query和params区别
query类似 get, 跳转之后页面 url后面会拼接参数,类似?id=1, 非重要性的可以这样传, 密码之类还是用params刷新页面id还在
params类似 post, 跳转之后页面 url后面不会拼接参数 , 但是刷新页面id 会消失


3) this.$router.replace() (用法同上,push)

4) this.$router.go(n)

向前或者向后跳转n个页面，n可为正整数或负整数

ps:区别

this.$router.push

跳转到指定url路径，并向history栈中添加一个记录，点击后退会返回到上一个页面

this.$router.replace

跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)

this.$router.go(n)

向前或者向后跳转n个页面，n可为正整数或负整数


原文链接：https://www.jb51.net/article/160401.htm引用
