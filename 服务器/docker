直白概念：docker 指的是别人配置好容器copy成一个镜像

检查linux内核版本

uname -r

1>docker安装命令：
yum install docker

2>启动docker
systemctl start docker

3>开机启动docker
systemctl enable docker

4>停止docker
systemctl stop docker

5>查看防火墙状态
systemctl status firewalld.service

6>开启防火墙
systemctl start firewalld.service

7>关闭防火墙
systemctl stop firewalld.service

8>禁用防火墙
systemctl disable firewalld.service


docker常用操作命令：

9>docker镜像查询  说明:搜索docker hup库上的镜像
docker search ***

10>docker镜像安装
docker pull ***

11>docker镜像列表 说明:查看本地所有镜像
docker images

12>docker镜像删除  说明:删除指定的本地镜像
docker rmi image-id

docker容器操作命令：

13>运行docker镜像容器  说明:--name 自定义容器名称 -d 后台运行
docker run --name myname -d 镜像名

14>查看运行中docker容器
docker ps

15>查看docker容器
docker ps -a

16>删除docker容器
docker rm image-id

17>停止运行中的docker容器
docker stop image-id

18>docker端口映射  说明:不配置端口映射外部无法访问docker端口服务

docker run -d -p 3306:3306 --name mysql mysql

19>查看docker容器日志
docker logs image-id

20>启动mysql镜像  说明:有的镜像启动方法不一
docker run --name mysql -e MYSQL_ROOT_PASSWORD:123456 -d -p 3306:3306 mysql

21>docker如何进入容器  说明:exec方式，终端时分开的，推荐
docker exec -it image-id /bin/bash
重置密码：
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'newpassword'


22>如何使用docker运行springboot项目

1）在 pom.xml-properties中添加 Docker 镜像名称：
<docker.image.prefix>springboot</docker.image.prefix>
2）plugins 中添加 Docker 构建插件：
<!-- Docker maven plugin -->
		<plugin>
			<groupId>com.spotify</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<version>1.0.0</version>
			<configuration>
				<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
				<dockerDirectory>src/main/docker</dockerDirectory>
				<resources>
					<resource>
						<targetPath>/</targetPath>
						<directory>${project.build.directory}</directory>
						<include>${project.build.finalName}.jar</include>
					</resource>
				</resources>
			</configuration>
		</plugin>
		<!-- Docker maven plugin -->

3）在目录src/main/docker下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ADD springboot项目名.jar app.jar
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

4）在linux安装好jdk和maven，然后将springboot项目拷贝服务器中，进入项目路径下进行打包测试
#打包
mvn package
#启动
java -jar target/spring-boot-docker-1.0.jar
#使用 DockerFile 构建镜像
mvn package docker:build
#运行镜像
docker run -p 8080:8080 -d springboot镜像

23）将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下

docker cp /www/runoob 96f7f14e99ab:/www/

24）将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中

docker cp  96f7f14e99ab:/www /tmp/

25）docker exec -it 容器id /bin/bash后，vim命令用不了
# apt-get update   同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引
# apt-get install vim 安装vim命令


26）搭建maven私服 + nexus

#拉取nexus镜像
a)docker pull nexus
#启动nexus服务
b)docker run -d -p 8081:8081 --name nexus sonatype/nexus3


27)docker启动RabbitMQ

#sudo docker pull rabbitmq:management
#docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management

tips：直接docker pull rabbitmq（不能打开web管理页面）

#查看rabbitmq日志
#docker logs rabbit


28）docker启动jar包方式 （该方式为无镜像生成容器挂载模式）
docker run -d -p 3000:3000 --name music
-v /home/music/springboot-python-0.0.1-SNAPSHOT.jar:/home/music/springboot-python-0.0.1-SNAPSHOT.jar
java:8u111 java -jar /home/music/springboot-python-0.0.1-SNAPSHOT.jar

tips:
-d 表示在后台启动

-p 9090:9090 表示将容器的端口 映射成宿主主机的端口，否则9090端口访问不到

-v /usr/springboot-1.jar:/usr/springboot-1.jar 表示将宿主主机的jar文件，映射到容器中（分号前为宿主主机的路径，分号后为容器中的路径）

--name springboot 表示为该容器取一个全局唯一的名称，这里我取的名称为springboot

java:8u111 表示镜像文件的名称和tag

java -jar /usr/springboot-1.jar 表示运行jar包，注意：这里的jar包为容器中的位置，是通过前面的-v属性映射的


29)使用docker save导出镜像到磁盘 

docker save -o nginx.tar nginx:latest

30)加载导出的**.tar文件到本地：

docker load -i nginx.tar


31)docker 启动配置启动nginx https模式命令

docker run -d --name nginx -p 80:80 -p 443:443 -v /home/nginx:/etc/nginx nginx

小坑:上次因为没有配443端口，跳转之后一直访问不了https


32)Dockerfile语法

Dockerfile就是一个文本文件，其中包含一个个的指令，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。

指令 						说明 									示例
FROM					指定基础镜像								FROM Centos:7
ENV 			设置环境变量，可在后面指令使用   					ENV  key value
COPY 			拷贝本地文件到镜像指定的目录						copy ./mysql.5.5.rpm /tmp
RUN 			执行Linux的shell命令，一般是安装过程的命令			RUN yun install gcc
EXPOSE			指定容器运行时监听的端口，是给镜像者使用看的		EXPOSE 8848
ENTRYPOINT		镜像中应用的启动命令，容器运行时调用				ENTRYPOINT java -jar xx.jar


示例：

# 指定基础镜像
FROM ubuntu:16.04
# 配置环境变量，JDK的安装目录
ENV JAVA_DIR=/usr/local

# 拷贝jdk和java项目的包
COPY ./jdk8.tar.gz $JAVA_DIR/
COPY ./docker-demo.jar /tmp/app.jar

# 安装JDK
RUN cd $JAVA_DIR \
 && tar -xf ./jdk8.tar.gz \
 && mv ./jdk1.8.0_144 ./java8

# 配置环境变量
ENV JAVA_HOME=$JAVA_DIR/java8
ENV PATH=$PATH:$JAVA_HOME/bin

# 暴露端口
EXPOSE 8090
# 入口，java项目的启动命令
ENTRYPOINT java -jar /tmp/app.jar


33)生成镜像的命令

docker build -t javaweb:1.0 .

34）Docker 部署 Nacos

docker run --name nacos -d -p 8848:8848 \
--privileged=true \ #使用该参数，container内的root拥有真正的root权限
--restart=always \	#在容器退出时总是重启容器
-e JVM_XMS=512m -e JVM_XMX=512m -e MODE=standalone \
-v   \
bdf60dc2ada3