sentinel


隔离策略：信号量隔离
熔断降级策略：基于慢点用比例或异常比例
限流：基于QPS，支持基于调用关系的限流
流量整形：支持慢启动，匀速排队模式


QPS：指的是每秒的请求数

线程数：是该资源能使用的tomcat线程数的最大值；也就是通过限制线程数量，实现舱壁模式。


1）雪崩问题

什么是雪崩问题？

微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。

解决雪崩问题的常见四种方式：

超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待。--缓解
舱壁模式：限定每个业务能使用线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。--服务宕机情况下会造成资源浪费
熔断降级：由断路器统计业务执行的异常比例，如果超过阈值则会熔断该业务，拦截访问该业务的一切请求。

流量控制：限制业务访问的QPS，避免服务因流量的突增而故障。--预防雪崩问题


2）微服务整合Sentinel

1、引入sentinel依赖

<!--引入sentinel依赖-->
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
</dependency>
<!--该依赖与sentinel一起添加，不然会报错-->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>6.0.18.Final</version>
</dependency>

2、配置控制台地址

cloud:
sentinel:
  transport:
    dashboard: 120.77.239.151:8080

3、访问微服务的任意端点，触发sentinel监控


3)sentinel面板使用详解

1、簇点链路

就是项目内的调用链路，链路中被监控的每个接口就是一个资源，默认情况下sentinel会监控springmvc的每一个端点，因此springmvc的每一个端点就是调用链路中的一个资源。


2、流控模式

在添加限流规则时，点击高级选线，可以选择三种流控模式：
直接：统计当前资源的请求，触发阈值时对当前资源直接限流
关联：统计与当前资源相关的另一个资源，触发阈值，对当前资源限流

流控模式-关联：
满足下面条件可以使用关联模式:
1）两个有竞争关系的资源
2）一个优先级较高，一个优先级较低

链路：统计从指定链路访问到本地资源的请求，触发阈值时，对指定链路限流


3、流控效果

流控效果是指请求达到流控阈值时应该采取的措施，包括三种：

1）快速失败：达到阈值后，请的请求会被立即拒绝并抛出FlowException,是默认的处理方式。
2）warm up：预热模式，对超出阈值的请求同样时拒绝抛出异常，但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。
3）排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长。

总结：
快速失败：QPS超过阈值时，拒绝请的请求
warm up：QPS超过阈值时，拒绝新的请求，QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。
排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求，如果请求预期等待时长大于超时时间，直接拒绝。

4）热点参数限流

之前的限流时统计访问某个资源的所有请求，判断是否超过QPS阈值，而热点参数限流时分别统计参数值相同的请求，判断是否超过QPS阈值。



5）Feign整合Sentinel


*隔离和降级

虽然限流可以经量避免因高并发而引起的服务故障，但服务还会因为其他原因而导致故障。而要将这些故障控制在一定范围，避免雪崩，就要高线程隔离，和熔断降级手段了。

不管是线程隔离，还是熔断降级，都是对客户端（调用方）的保护。


springCloud中，微服务条用都是通过feign来实现的，因此做客户端保护必须整合feign和Sentinel

1、修改application.yml文件，开启feign的sentinel功能
feign:
  sentinel:
    enabled: true #开启feign的sentinel功能

2、给feignclient编写失败后的降级逻辑
方式一、fallbackClass，无法对远程调用的异常做处理
方式二、fallbackFactory，可以对远程调用的异常做处理


步骤一、在feign-api项目中定义类，实现fallbackFactory

  public class UserClientFallbackFactory implements FallbackFactory<UserClient> {

      private static final Logger logger = LoggerFactory.getLogger(UserClientFallbackFactory.class);


      @Override
      public UserClient create(Throwable throwable) {
          //创建UserClient接口实现类，实现其方法，编写失败降级的处理逻辑
          return new UserClient() {
              @Override
              public ResultMessage userInfo() {
                  //记录异常信息
                  logger.error("查询用户信息异常", throwable);
                  return new ResultMessage();
              }
          };
      }
  }


步骤二、在feign-api项目中的DefaultFeignConfiguration类中，将xxxFallbackFactory注册为一个Bean

  @Bean
    public UserClientFallbackFactory userClientFallbackFactory() {
        return new UserClientFallbackFactory();
    }


步骤三、在feign-api项目中的xxxClient接口中使用xxxClientFallbackFactory

  @FeignClient(value = "market-user", fallbackFactory = UserClientFallbackFactory.class)


6）线程隔离

线程隔离有两种实现方式：
线程池隔离
优点：支持主动超时，支持异步调用
缺点：线程的额外开销较大

信号量隔离（sentinel默认方式）
优点：轻量级，无额外开销
缺点：不支持主动超时，不支持异步调用


6）熔断降级
熔断降级是解决雪崩问题的重要手段；其思路是由断路器统计通用的异常比例，慢请求比例，如果超出阈值则会熔断该服务，即拦截该服务的一切请求，而当服务恢复时，断路器会放行该服务的请求。


概念：closed ，open，half-open

当QPS达到设定的失败阈值后，会从closed（success）状态转成open（快速失败）状态，这里会有一个熔断结束时间设置，当熔断时间结束时，会尝试去half-open放行一次请求，如果请求通过，则会重新回到closed状态，如果失败，则会打开断路器，继续回到open状态


熔断策略：慢调用，异常比例，异常数
慢调用：
  业务的相应时长（RT）大于指定时长的请求，认定为慢调用请求，在指定的时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。

异常比例和异常数：
  统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超出指定异常数），则会触发熔断。



