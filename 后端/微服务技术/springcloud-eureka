springcloud
 
2021-08-27 | 学习笔记

1）微服务需要根据业务模块拆分，做到单一职责，不要重复开发相同业务
2）微服务可以将业务暴露为接口，供其他微服务使用
3）不同微服务之间都应该要有自己独立的数据库



微服务远程调用-restTemplate
在application主方法注册restTemplate(启动类)

@Bean
public RestTemplate restTemplate(){
	return new RestTemplate();
}


微服务调用方式
1）基于RestTemplate发起的http请求实现远程调用
2）http请求做远程调用时与语言无关的调用，只要知道对方的ip，端口，接口路径，请求参数即可


euraka的作用

1）消费者该如何获取服务提供者具体信息？
服务提供者启动时向eureka注册自己的信息
eureka保存这些信息
消费者根据服务名称向eureka拉取提供者信息

2）如果有多个服务提供者，消费者该如何选择？
服务消费者利用负载均衡算法，从服务列表中挑选一个

3）消费者如何感知服务提供者健康状态？
服务提供者会每隔30秒向eurekaServer发送心跳请求，报告健康状态
eureka会更新记录服务列表信息，心跳不正常会被剔除
消费者就可以拉取到最新信息


eureka架构中，微服务角色有两类：
EurekaServer：服务端，注册中心
记录服务信息
心跳监控

EurekaClient：客户端
Provider：服务提供者
注册自己的信息到EurekaServer
每隔30秒向EurekaServer发送心跳

consumer：服务消费者
根据服务名称从EurekaServer拉取服务列表
基于服务列表做负载均衡，选中一个微服务后发起远程调用


Eureka注册中心

搭建EurekaServer步骤
1）创建项目，引入spring-cloud-starter-netflix-eureka-server依赖
2）编写启动类，添加@EnableEurekaServer
3）添加application.yml配置文件

例子：
server:
  port: 3189
spring:
  application:
    ##eureka的服务名称
    name: eureka-server
eureka:
  client:
    # 设置是否将自己作为客户端注册到注册中心（缺省true）
    # 这里为不需要（查看@EnableEurekaServer注解的源码，会发现它间接用到了@EnableDiscoveryClient）
    register-with-eureka: true
    fetch-registry: false
    #eureka的地址信息
    service-url:
      defaultZone: http://localhost:3189/eureka/


注册服务
将user-service服务注册到EurekaServer步骤
1）在user-service项目中引入spring-cloud-starter-netflix-eureka-client
2）在application.yml文件，编写下面的配置

spring:
  application:
    ##eureka的服务名称
    name: user-server
eureka:
  client:
    #eureka的地址信息
    service-url:
      defaultZone: http://localhost:3189/eureka/


服务发现
在order-service完成服务拉取
服务拉取时基于服务名称获取服务列表，然后对服务列表做负载均衡
1）使用服务名称代替ip：端口：
http：//user-service/user/ + getUserId

2）在order-service项目启动类中的RestTemplate中添加负载均衡注解
@LoadBalanced

负载均衡的两种方式：@LoadBalanced 和 Ribbon

#Ribbon负载均衡

负载均衡策略
通过定义IRule实现可以修改负载均衡规则，有两种方式
1）代码方式，在order-service的启动类中，定义一个新的IRule：

@Bean
public IRule randomRule(){
    return new RandomRule();
}

2)配置文件方式，在order-service的application.yml文件中，添加新的配置可以修改规则
user-service：
  ribbon：
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule#负载均衡规则

ps:第一种方式，针对的是全局修改，就是会将所有的微服务策略统一修改
第二种则是定义指定的微服务名称（user-service）进行单一修改


饥饿加载

Ribbon默认是采用懒加载，即第一次访问是才会去创建LoadBalanceClient，请求时间会很长，而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载

ribbon:
  eager-load:
    enabled: true #开启饥饿加载
    clients: user-server #指定对user-server这个服务饥饿架加载

ps:单只有一个服务需要修改时，直接在clients后添加即可，但同时有多个需要懒加载的情况下，需要在clients下边换行 - 服务名

