Stream流式编程

例子：list.stream().map(Person::getName).sorted().limit(10).collect(Collectors.toList());
解读：

1）stream() 将list转换成为流
2）map() 将原来的list(Person)转换成为List(String),其中的String元素为Person的name成员变量
3）sorted() 排序
4）limit() 只保留前十的元素
5）collect() 将流转换回集合类型



例子：list.stream().filter(person -> person.getAge() == 20).collect(Collectors.toList());
解读：

1）filter() 保存filter内boolean为true的内容



例子：list = list.stream().skip(2).collect(Collectors.toList());
解读：

1)skip() 去除前 n 个元素


#关键字：distinct()
解读：

1）去除重复元素，这个方法是通过类的 equals 方法来判断两个元素是否相等的

#关键字：map(T -> R)
解读：

1）将流中的每一个元素 T 映射为 R（类似类型转换）

#关键字：anyMatch(T -> boolean)
解读：boolean b = list.stream().anyMatch(person -> person.getAge() == 20);

1）流中是否有一个元素匹配给定的 T -> boolean 条件

#关键字：allMatch(T -> boolean)
解读：boolean result = list.stream().allMatch(Person::isStudent);

1）流中是否所有元素都匹配给定的 T -> boolean 条件

#关键字：noneMatch(T -> boolean)
解读：boolean result = list.stream().noneMatch(Person::isStudent);

1）流中是否没有元素匹配给定的 T -> boolean 条件

#关键字：findAny()和 findFirst()
解读：

1）findAny() 找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream()并行时找到的是其中一个元素）
2）findFirst() 找到第一个元素

#关键字 joining 连接字符串
解读：String s = list.stream().map(Person::getName).collect(joining(","));

1）在每一个getName值后添加,
