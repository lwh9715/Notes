elasticsearch

文档：一条数据就是一个文档，es是json格式
字段：json文档中的字段
索引：同类型文档的集合
映射：索引中文档的约束，比如字段名称类型


1）创建网络
docker network create es-net


2)拉取elasticsearch镜像
docker pull elasticsearch:7.12.1

3)启动elasticsearch
docker run -d \
--name es \
-e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \
-e "discovery.type=single-node" \
-v es-data:/usr/share/elasticsearch/data \
-v es-plugins:/usr/share/elasticsearch/plugins \
--privileged \
--network es-net \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.12.1


4)部署kibana
docker run -d --name kibana \
-e ELASTICSEARCH_HOSTS=http://es:9200 \
--network=es-net \
-p 5601:5601 \
kibana:7.12.1

5)安装IK分词器
下载ik分词器文件压缩包,放到es-plugins数据卷中，重启es即可生效
https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.12.1

"analyzer": "ik_max_word",更细化分词，占用内存更多
"analyzer": "ik_smart",智能切分，占用内存少

6）拓展词库

在ik分词器插件下config目录中的IKAnalyzer.cfg.xml文件

<properties>
	<comment>IK Analyzer 扩展配置</comment>
	<!--用户可以在这里配置自己的扩展字典 -->
	<entry key="ext_dict">ext.dic</entry>
	 <!--用户可以在这里配置自己的扩展停止词字典-->
	<entry key="ext_stopwords">stopword.dic</entry>
	<!--用户可以在这里配置远程扩展字典 -->
	<!-- <entry key="remote_ext_dict">words_location</entry> -->
	<!--用户可以在这里配置远程扩展停止词字典-->
	<!-- <entry key="remote_ext_stopwords">words_location</entry> -->
</properties>


在config同级目录下创建ext.dic / stopword.dic 文件,重启es即可生效
注明：只有在使用"analyzer": "ik_smart","analyzer": "ik_max_word"才有效


7）索引库操作

mapping属性：（mapping是对索引库中文档的约束,常见的mapping属性包括）

#type：字段数据类型，常见的简单类型有
	字符串：text（可分词文本），keyword（精确值）
	数值：long,integer,byte,double,float
	布尔：Boolean
	日期：date
	对象：object

#index 是否创建索引,默认为true

#analyzer 分词器,只有跟text类型才有使用,其他的类型不需要分词

8）创建索引库

PUT /索引库名称

PUT /amos
{
  "mappings": {
    "properties": {
      "info": {
        "type": "text",
        "analyzer": "ik_max_word"
      },
      "email": {
        "type": "keyword",
        "index": false
      },
      "name": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "keyword",
            "index": false
          }
        }
      }
    }
  }
}


9)查询索引库

GET /amos

10）删除索引库

DELETE /amos

11)修改索引库

索引库和mapping一旦创建无法修改，但是可以添加新的字段（全新的字段名），语法如下

PUT /amos/_mapping

{
	"properties":{
		"新字段名称":{
			"type":"object"
		}	
	}
}

DSL语法示例：

POST /索引库名/_doc/文档id
{
	"字段1":"值1",
	"字段2":"值2",
	"字段3":{
			"子属性1":"值3",
			"子属性2":"值4",
	},
}

12）添加文档

POST /amos/_doc/a1
{
  "info":"liangwenhui振作起来",
  "email":"lwh9715@gmail.com",
  "name":{
    "firstname":"wenhui",
    "lastname":"liang"
  }
}

13）查询文档

GET /amos/_doc/a1

14）删除文档

DELETE /amos/_doc/a1

15）修改文档

方式一：全量修改，会删除旧的文档，添加新的文档

POST /amos/_doc/a1
{
  "info":"liangwenhui振作起来",
  "email":"lwh9715@gmail.com",
  "name":{
    "firstname":"wenhui",
    "lastname":"liang"
  }
}

方式二：局部更新	（doc为固定写法）

POST /amos/_update/a1
{
  "doc": {
      "info":"liangwenhui振作",
      "email":"lwx768561@gmail.com" 
  }
}


16)es支持两种地理坐标数据类型

geo_point:由纬度和经度确定的一个点
geo_shape:有多个geo_point组成的复杂几何图形

17）字段拷贝可以使用copy_to属性将当前字段拷贝到指定字段

"all":{
	"type":"text",
	"analyzer":"ik_max_word"
},
"brand":{
	"type":"keyword",
	"copy_to":"all"
}


第二阶段

分布式搜索引擎

DSL 查询语法

1）查询所有
查询出所有数据，一般用于测试。
例如：match_all

GET /amos/_search
{
  "query": {
    "match_all": {}
  }
}

2）全文检索查询
利用分词器对用户输入内容分词，然后去倒排索引库中匹配。
例如：match_query,multi_match_query

GET /amos/_search
{
  "query": {
    "match": {
      "word": "00后少年为冬奥梦每天零下30度晨练"
    }
  }
}


GET /amos/_search
{
  "query": {
    "multi_match": {
      "query": "影视",
      "fields": ["word","mid"]
    }
  }
}


3）精准查询
根据精确词条值查询，一般是查找keyword，数值，日期，Boolean等类型字段。
例如：ids,range(根据值的范围查询),term(根据词条精确值查询)

GET /amos/_search
{
  "query": {
    "term": {
      "iconDesc": {
        "value": "爆"
      }
    }
  }
}

GET /amos/_search
{
  "query": {
    "range": {
      "onboardTime": {
        "gte": 163936417000,
        "lte": 1639364187000
      }
    }
  }
}

4）地理查询
根据经纬度查询
例如：geo_distance，geo_bounding_box

GET /amos/_search
{
  "query": {
    "geo_distance": {
      "distance": "15km",
      "location": "31.21,121.5"
    }
  }
}


5）复合查询
复合查询可以将上述各种查询条件组合起来，合并查询条件。
例如：bool，function_score

#function_score 复合查询

GET /amos/_search
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "iconDesc": "爆"
        }
      },
      "functions": [
        {
          "filter": {
            "term": {
              "category": "国内要闻"
            }
          },
          "weight": 10
        }
      ],
      "boost_mode": "sum"
    }
  }
}

Tips：
1）query 表示原始查询条件，搜索文档并根据相关性打分
2）filter 过滤条件，符合条件的文档才会被重新算分
3）weight 算分函数，将来回与query查询出来的score运算，得到新的分数。
算分函数包括：
weight（给一个常量值，作为函数结果）
field_value_factor（用文档中的某个字段作为函数结果）
random_score（随机生成一个值，作为函数结果）
script_score（自定义计算公式，公式结果作为函数结果）
4)加权模式，定义function score与query score的运算方式。
加权模式包括：
multiply（两者相乘）为默认加权模式
replace（用function score 替换 query score）
其他 sum（两者相加）avg（两者的平均值）max min



#bool 复合查询

GET /amos/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "iconDesc": {
              "value": "爆"
            }
          }
        }
      ],
      "should": [
        {
          "term": {
            "category": {
              "value": "游戏"
            }
          }
        },
        {
          "term": {
            "category": {
              "value": "音乐"
            }
          }
        }
      ],
      "must_not": [
        {
          "term": {
            "category": {
              "value": "社会新闻"
            }
          }
        },
        {
          "term": {
            "category": {
              "value": "国内要闻"
            }
          }
        }
      ],
      "filter": [
        {
          "term": {
            "category": "艺人"
          }
        }
      ]
    }
  }
}

Tips：
1）must 必须匹配每个子查询，类似"与"
2）should 选择性匹配子查询，类似"或"
3）must_not 必须不匹配，不参与算分，类似"非"
4）filter 必须匹配，不参与算分



搜索结果处理

1）排序

GET /amos/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "iconDesc": {
        "order": "asc"
      }
    },
        {
      "category": {
        "order": "desc"
      }
    }
  ]
}

2）分页

elasticsearch 默认情况下只返回top10条数据，如果需要更多则要修改分页参数

GET /amos/_search
{
  "query": {
    "match_all": {}
  },
  "from": 8000, 
  "size": 2, 
  "sort": [
    {
      "iconDesc": {
        "order": "asc"
      }
    },
        {
      "category": {
        "order": "desc"
      }
    }
  ]
}

Tips：
1）from 分页开始的位置，默认为0
2）size 期望获取的文档总数 

深度分页问题：
如果搜索页数过深，或者结果集越大，对内存和cpu的消耗越高，因此es设定结果集查询的上限是10000


3）高亮

GET /amos/_search
{
  "query": {
    "match": {
      "category": "艺人"
    }
  },
  "highlight": {
    "fields": {
      "category": {
        "pre_tags": "<em>",
        "post_tags": "</em>"
      },
      "word": {
        "pre_tags": "<em>",
        "post_tags": "</em>"
      }
    }
  }
}

Tips:
1) pre_tags高亮内容的前置标签
2) post_tags高亮内容的后置标签


第三阶段

1）Bucket 聚合功能

aggs代表集合，与query同级

GET /amos/_search
{
  "size": 0,
  "aggs": {
    "categoryagg": {
      "terms": {
        "field": "category",
        "size": 100
      }
    }
  }
}

Bucket聚合-限定聚合范围
默认情况下，Bucket集合是对索引库所有的文档做聚合，做限定聚合，只要添加query条件即可

GET /amos/_search
{
  "query": {
    "range": {
      "onboardTime": {
        "gte": 1639364187000
      }
    }
  }, 
  "size": 0,
  "aggs": {
    "categoryagg": {
      "terms": {
        "field": "category",
        "size": 100
      }
    }
  }
}

Tips：聚合和配置的属性
1）size：指定聚合结果的数量
2）order：指定聚合结果排序方式
3）field：指定聚合字段


2）Metric 嵌套聚合

#嵌套聚合metric

GET /amos/_search
{
  "size": 0,
  "aggs": {
    "categoryAgg": {
      "terms": {
        "field": "category",
        "size": 5
      },
      "aggs": {
        "rawHotAgg": {
          "stats": {
            "field": "realPos"
          }
        }
      }
    }
  }
}


3）自动补全

首先去官网下载拼音插件
https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.12.1

把插件解压放入es 挂载插件目录
/var/lib/docker/volumes/es-plugins/_data

重启elasticsearch
docker restart es


自定义分词器：
1）插件索引库时，在setting中配置，可以包含三部分
2）character filter
3）tokenizer
4）filter


创建拼音分词器DSL语句

PUT /amos
{
  "settings": {
    "analysis": {
      "analyzer": {
        "py_analyzer": {
          "tokenizer": "ik_max_word",
          "filter": "py"
        }
      },
      "filter": {
        "py": {
          "type": "pinyin",
          "keep_full_pinyin": false,
          "keep_joined_full_pinyin": true,
          "keep_original": true,
          "limit_first_letter_length": 16,
          "remove_duplicated_term": true,
          "none_chinese_pinyin_tokenizer": false
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "word": {
        "type": "text",
        "analyzer": "py_analyzer",
        "search_analyzer": "ik_max_word"
      },
      "category": {
        "type": "keyword"
      },
      "realPos": {
        "type": "long",
        "index": false
      }
    }
  }
}


#自动补全查询

GET /amos_1/_search
{
  "suggest": {
    "amos_Suggest": {
      "text": "北京东奥会",
      "completion": {
        "field": "word",
        "skip_duplicates": true,
        "size": 10
      }
    }
  }
}

Tips：前提条件时字段必须是 completion 类型；例如

PUT /amos_1
{
  "mappings": {
    "properties": {
      "word": {
        "type": "completion"
      }
    }
  }
}

